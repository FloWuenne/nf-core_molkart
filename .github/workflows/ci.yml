name: nf-core CI
# This workflow runs the pipeline with the minimal test dataset to check that it completes without any syntax errors
on:
  push:
    branches:
      - dev
  pull_request:
  release:
    types: [published]

env:
  NXF_ANSI_LOG: false
  NFTEST_VER: "0.8.2"

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:
  nftest-changes:
    name: Check for changes (nf-test)
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.filter.outputs.changes }}

    steps:
      - uses: actions/checkout@v3

      - name: Combine all tags.yml files
        id: get_tags
        run: find . -name "tags.yml" -not -path "./.github/*" -exec cat {} + > .github/tags.yml

      - name: debug
        run: cat .github/tags.yml

      - uses: frouioui/paths-filter@main
        id: filter
        with:
          filters: ".github/tags.yml"
          token: ""
  nftest:
    name: ${{ matrix.tags }} ${{ matrix.profile }} NF ${{ matrix.NXF_VER }}
    runs-on: ubuntu-latest
    needs: nftest-changes
    if: needs.nftest-changes.outputs.tags != '[]'
    strategy:
      fail-fast: false
      matrix:
        tags: ["${{ fromJson(needs.nftest-changes.outputs.tags) }}"]
        profile: ["docker", "singularity"]
        TEST_DATA_BASE:
          - "test-datasets/data"
        NXF_VER:
          - "23.04.0"
          - "latest-everything"
        exclude:
          - tags: "custom/dumpsoftwareversions"
    env:
      NXF_ANSI_LOG: false
      TEST_DATA_BASE: "${{ github.workspace }}/test-datasets"
      SENTIEON_LICENSE_BASE64: ${{ secrets.SENTIEON_LICENSE_BASE64 }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1

      - name: Cache nf-test installation
        id: cache-software
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/nf-test
            /home/runner/.nf-test/nf-test.jar
          key: ${{ runner.os }}-${{ env.NFTEST_VER }}-nftest

      - name: Install nf-test
        if: steps.cache-software.outputs.cache-hit != 'true'
        run: |
          wget -qO- https://code.askimed.com/install/nf-test | bash
          sudo mv nf-test /usr/local/bin/

      - name: Setup apptainer
        if: matrix.profile == 'singularity'
        uses: eWaterCycle/setup-apptainer@main

      - name: Set up Singularity
        if: matrix.profile == 'singularity'
        run: |
          mkdir -p $NXF_SINGULARITY_CACHEDIR
          mkdir -p $NXF_SINGULARITY_LIBRARYDIR

      # Set up secrets
      - name: Set up nextflow secrets
        if: env.SENTIEON_LICENSE_BASE64 != null
        run: |
          nextflow secrets set SENTIEON_LICENSE_BASE64 ${{ secrets.SENTIEON_LICENSE_BASE64 }}
          nextflow secrets set SENTIEON_AUTH_MECH_BASE64 ${{ secrets.SENTIEON_AUTH_MECH_BASE64 }}
          SENTIEON_ENCRYPTION_KEY=$(echo -n "${{ secrets.ENCRYPTION_KEY_BASE64 }}" | base64 -d)
          SENTIEON_LICENSE_MESSAGE=$(echo -n "${{ secrets.LICENSE_MESSAGE_BASE64 }}" | base64 -d)
          SENTIEON_AUTH_DATA=$(python3 bin/license_message.py encrypt --key "$SENTIEON_ENCRYPTION_KEY" --message "$SENTIEON_LICENSE_MESSAGE")
          SENTIEON_AUTH_DATA_BASE64=$(echo -n "$SENTIEON_AUTH_DATA" | base64 -w 0)
          nextflow secrets set SENTIEON_AUTH_DATA_BASE64 $SENTIEON_AUTH_DATA_BASE64

      # Test the module
      - name: Run nf-test
        run: |
          nf-test test \
            --profile=${{ matrix.profile }} \
            --tag ${{ matrix.tags }} \
            --tap=test.tap \
            --verbose

  confirm-pass:
    runs-on: ubuntu-latest
    needs:
      - pytest
      - nftest
    if: always()
    steps:
      - name: All tests ok
        if: ${{ success() || !contains(needs.*.result, 'failure') }}
        run: exit 0
      - name: One or more tests failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: debug-print
        if: always()
        run: |
          echo "toJSON(needs) = ${{ toJSON(needs) }}"
          echo "toJSON(needs.*.result) = ${{ toJSON(needs.*.result) }}"

##  nftest:
#    name: Run pipeline with test data
# Only run on push if this is the nf-core dev branch (merged PRs)
#    if: "${{ github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'nf-core/molkart') }}"
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        NXF_VER:
#          - "23.04.0"
#          - "latest-everything"
#    steps:
#      - name: Check out pipeline code
#        uses: actions/checkout@v4

#      - name: Install Nextflow
#        uses: nf-core/setup-nextflow@v1
#        with:
#          version: "${{ matrix.NXF_VER }}"#

#      - name: Run pipeline with test data
# TODO nf-core: You can customise CI pipeline run tests as required
# For example: adding multiple test runs with different parameters
# Remember that you can parallelise this by using strategy.matrix
#        run: |
#          nextflow run ${GITHUB_WORKSPACE} -profile test,docker --outdir ./results
